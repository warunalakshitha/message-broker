/* Generated By:JavaCC: Do not edit this line. MessageFilter.java */
/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

package org.wso2.broker.core.selector.generated;

import java.io.StringReader;
import org.wso2.broker.core.selector.BooleanExpression;
import org.wso2.broker.core.selector.EqualityExpression;
import org.wso2.broker.core.selector.ConstantExpression;
import org.wso2.broker.core.selector.Expression;
import org.wso2.broker.core.selector.JmsPropertyExpression;

public class MessageFilter implements MessageFilterConstants {

    public MessageFilter() {
        this(new StringReader(""));
    }

    public MessageFilter(String selectorString) {
        this(new StringReader(selectorString));
    }

    public BooleanExpression parse() throws Exception {
        return parseSelector();
    }

  final public BooleanExpression parseSelector() throws ParseException {
  BooleanExpression value;
    value = ComparisonExpression();
    jj_consume_token(0);
       {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanExpression ComparisonExpression() throws ParseException {
    BooleanExpression value;
    Expression left;
    Expression right;
    left = identifier();
    jj_consume_token(19);
    right = value();
            value = new EqualityExpression(left, right);
      {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public Expression identifier() throws ParseException {
    Token t;
    Expression expr;
    t = jj_consume_token(IDENTIFIER);
            expr = new JmsPropertyExpression(t.image);
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression value() throws ParseException {
    Expression expr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      expr = stringLiteral();
      break;
    case NUMERIC_LITERAL:
      expr = numericLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression stringLiteral() throws ParseException {
    Token t;
    Expression expr;
    t = jj_consume_token(STRING_LITERAL);
        String text = t.image;
        char[] charArray = new char[text.length()-2];
        for (int i = 1; i < text.length() - 1; i++) {
            charArray[i-1] = text.charAt(i);
        }
        expr = new ConstantExpression(new String(charArray));
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression numericLiteral() throws ParseException {
    Token t;
    Expression expr;
    t = jj_consume_token(NUMERIC_LITERAL);
        String text = t.image;
        expr = ConstantExpression.createFromNumericInteger(text);
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MessageFilterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public MessageFilter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MessageFilter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MessageFilterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public MessageFilter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MessageFilterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public MessageFilter(MessageFilterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(MessageFilterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
